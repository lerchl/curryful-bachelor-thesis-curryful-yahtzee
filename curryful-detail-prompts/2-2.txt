Here is the code for curryful-commons, which curryful-rest builds upon:
package io.github.curryful.commons.collections;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

/**
 * Wrapper for an immutable {@link ArrayList}.
 * @param <T> the type of elements in the list
 */
public class ImmutableArrayList<T> {

	protected final List<T> list = new ArrayList<>();

	protected ImmutableArrayList() {
		// noop
	}

	/**
	 * Returns an empty {@link ImmutableArrayList}.
	 */
	public static <T> ImmutableArrayList<T> empty() {
		return new ImmutableArrayList<>();
	}

	@Override
	public int hashCode() {
	    return list.hashCode();
	}

	@Override
	public boolean equals(Object other) {
		if (other == null || !(other instanceof ImmutableArrayList)) {
			return false;
		}

		return list.equals(((ImmutableArrayList<?>) other).list);
	}

	/**
	 * Returns a {@link Stream} of the elements in the list.
	 * @see ArrayList#stream()
	 */
	public Stream<T> stream() {
		return list.stream();
	}

	/**
	 * Return the number of elements in the list.
	 * @see ArrayList#size()
	 */
	public int size() {
		return list.size();
	}

	/**
	 * Returns true if the list contains no elements.
	 * @see ArrayList#isEmpty()
	 */
	public boolean isEmpty() {
		return list.isEmpty();
	}
}

package io.github.curryful.commons.collections;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

import io.github.curryful.commons.monads.Maybe;

/**
 * Wrapper for an immutable {@link HashMap} to wrap value returns in {@link Maybe}s.
 * @param <K> the type of keys maintained by this map
 * @param <V> the type of mapped values
 */
public class ImmutableMaybeHashMap<K, V> {

	protected final Map<K, V> map = new HashMap<>();

	protected ImmutableMaybeHashMap() {
		// noop
	}

	/**
	 * Returns an empty {@link ImmutableMaybeHashMap}.
	 */
	public static <K, V> ImmutableMaybeHashMap<K, V> empty() {
		return new ImmutableMaybeHashMap<>();
	}

	@Override
	public int hashCode() {
	    return map.hashCode();
	}

	@Override
	public boolean equals(Object other) {
		if (other == null || !(other instanceof ImmutableMaybeHashMap)) {
			return false;
		}

		return map.equals(((ImmutableMaybeHashMap<?, ?>) other).map);
	}

	/**
     * Returns a {@link Maybe}, wrapping the value to which the specified key is mapped
	 * or an empty {@link Maybe} if this map contains no mapping for the key.
	 * @param key the key whose associated value is to be returned
	 * @see HashMap#get(Object)
	 */
	public Maybe<V> get(Object key) {
		return Maybe.ofNullable(map.get(key));
	}

	/**
	 * Return the number of key-value pairs in the map.
	 * @see HashMap#size()
	 */
	public int size() {
		return map.size();
	}

	/**
	 * Returns a {@link Stream} of the key-value pairs in the map.
	 * @see HashMap#entrySet()
	 */
	public Stream<Map.Entry<K, V>> stream() {
		return map.entrySet().stream();
	}
}

package io.github.curryful.commons.collections;

/**
 * Extension of {@link ImmutableArrayList} that allows for mutation of the list.
 * @param <T> the type of elements in the list
 */
public class MutableArrayList<T> extends ImmutableArrayList<T> {

	protected MutableArrayList() {
		super();
	}

	/**
	 * Returns an empty {@link MutableArrayList}.
	 */
	public static <T> MutableArrayList<T> empty() {
		return new MutableArrayList<>();
	}

	/**
	 * Returns a {@link MutableArrayList} containing the elements from the specified list.
	 * @param list the list whose elements are to be put into this list
	 */
	public static <T> MutableArrayList<T> of(ImmutableArrayList<? extends T> list) {
		var mutableList = new MutableArrayList<T>();
		mutableList.addAll(list);
		return mutableList;
	}

	/**
	 * Add an element to the list.
	 * @param element the element to be added to the list
	 * @return true if the list changed as a result of the call
	 * @see ArrayList#add(Object)
	 */
	public boolean add(T element) {
		return list.add(element);
	}

	/**
	 * Add an element to the list at the specified index.
	 * @param index the index at which the specified element is to be inserted
	 * @param element the element to be added to the list
	 * @see ArrayList#add(int, Object)
	 */
	public void add(int index, T element) {
		list.add(index, element);
	}

	/**
	 * Add an element to the beginning of the list.
	 * @param element the element to be added to the list
	 * @see ArrayList#addFirst(Object)
	 */
	public void addFirst(T element) {
		list.addFirst(element);
	}

	/**
	 * Remove an element from the list.
	 * @param element the element to be removed from the list
	 * @return true if the list contained the specified element
	 * @see ArrayList#remove(Object)
	 */
	public boolean remove(T element) {
		return list.remove(element);
	}

	/**
	 * Remove the element at the specified index from the list.
	 * @param index the index of the element to be removed
	 * @return the element that was removed from the list
	 * @see ArrayList#remove(int)
	 */
	public T remove(int index) {
		return list.remove(index);
	}

	/**
	 * Add another list's elements to this list.
	 * @param list the list whose elements are to be put into this list
	 * @return true if this list changed as a result of the call
	 * @see ArrayList#addAll(Collection)
	 */
	public boolean addAll(ImmutableArrayList<? extends T> list) {
		return this.list.addAll(list.list);
	}
}

package io.github.curryful.commons.collections;

import io.github.curryful.commons.monads.Maybe;

/**
 * Extension of {@link ImmutableMaybeHashMap} that allows for mutation of the map.
 * @param <K> the type of keys maintained by this map
 * @param <V> the type of mapped values
 */
public class MutableMaybeHashMap<K, V> extends ImmutableMaybeHashMap<K, V> {

	protected MutableMaybeHashMap() {
		super();
	}

	/**
	 * Returns an empty {@link MutableMaybeHashMap}.
	 */
	public static <K, V> MutableMaybeHashMap<K, V> empty() {
		return new MutableMaybeHashMap<>();
	}

	/**
	 * Returns a {@link MutableMaybeHashMap} containing the key-value pairs from the specified map.
	 * @param maybeHashMap the map whose key-value pairs are to be put into this map
	 */
	public static <K, V, M extends ImmutableMaybeHashMap<? extends K, ? extends V>> MutableMaybeHashMap<K, V> of(M maybeHashMap) {
		var mutableMap = new MutableMaybeHashMap<K, V>();
		mutableMap.putAll(maybeHashMap);
		return mutableMap;
	}

	/**
	 * Put a key-value pair into the map, returning an {@link Maybe} wrapping the value previously
	 * associated with the key or an empty {@link Maybe} if there was no previously associated value.
	 * @param key the key with which the specified value is to be associated 
	 * @param value the value to be associated with the specified key
	 * @see HashMap#put(Object, Object)
	 */
	public Maybe<V> put(K key, V value) {
		return Maybe.ofNullable(map.put(key, value));
	}

	/**
	 * Remove a key-value pair from the map, returning an {@link Maybe} wrapping the value previously
	 * associated with the key or an empty {@link Maybe} if there was no previously associated value.
	 * @param key the key whose mapping is to be removed from the map
	 * @see HashMap#remove(Object)
	 */
	public Maybe<V> remove(Object key) {
		return Maybe.ofNullable(map.remove(key));
	}

	/**
	 * Put another map's key-value pairs into this map.
	 * @param maybeHashMap the map whose key-value pairs are to be put into this map
	 * @see HashMap#putAll(Map)
	 */
	public <M extends ImmutableMaybeHashMap<? extends K, ? extends V>> void putAll(M maybeHashMap) {
		maybeHashMap.map.forEach((k, v) -> map.put(k, v));
	}
}

package io.github.curryful.commons.combinators;

import java.util.function.Function;

public final class YCombinator {

	private interface RecursiveFunction<F> extends Function<RecursiveFunction<F>, F> { }

	private YCombinator() {
		// noop
	}

	public static final <A, B> Function<A, B> Y(Function<Function<A, B>, Function<A, B>> f) {
		RecursiveFunction<Function<A, B>> r = w -> f.apply(x -> w.apply(w).apply(x));
		return r.apply(r);
	}
}

package io.github.curryful.commons.monads;

import java.util.Optional;
import java.util.function.Function;

public class Maybe<T> extends Monad<T> {

    private Maybe(T value) {
        this.value = value;
    }

    public static <T> Maybe<T> just(T value) {
        return new Maybe<>(value);
    }

    public static <T> Maybe<T> none() {
        return new Maybe<>(null);
    }

    public static <T> Maybe<T> ofNullable(T nullable) {
        return new Maybe<>(nullable);
    }

    public static <T> Maybe<T> from(Optional<T> optional) {
        return optional.map(Maybe::just).orElse(Maybe.none());
    }

    public <V> Maybe<V> map(Function<T, V> f) {
        if (!hasValue()) {
            return Maybe.none();
        }

        return Maybe.ofNullable(f.apply(value));
    }

    public <V> Maybe<V> flatMap(Function<T, Maybe<V>> f) {
        if (!hasValue()) {
            return Maybe.none();
        }

        return f.apply(value);
    }
}

package io.github.curryful.commons.monads;

public abstract class Monad<T> {

    protected T value;

    // /////////////////////////////////////////////////////////////////////////
    // Methods
    // /////////////////////////////////////////////////////////////////////////

	// TODO: Abstract map and flat map methods

	/**
	 * If a value is present, returns the value, otherwise returns the provided value.
	 * 
	 * @param other the value to be returned if there is no value present
	 * @return the value, if present, otherwise the provided value
	 */
	public T orElse(T other) {
		return hasValue() ? value : other;
	}

    public boolean hasValue() {
        return value != null;
    }

    public T getValue() {
        return value;
    }
}

package io.github.curryful.commons.monads;

import java.util.function.Function;

public class Try<T> extends Monad<T> {

    private final Throwable error;

    private Try(T value, Throwable error) {
        this.value = value;
        this.error = error;
    }

    public static <T> Try<T> success(T value) {
        return new Try<>(value, null);
    }

    public static <T> Try<T> failure(Throwable error) {
        return new Try<>(null, error);
    }

    public <V> Try<V> map(Function<T, V> f) {
        if (value == null) {
            return Try.failure(error);
        }

        return Try.success(f.apply(value));
    }

	public <V> Try<V> flatMap(Function<T, Try<V>> f) {
		if (value == null) {
			return Try.failure(error);
		}

		return f.apply(value);
	}

    public boolean isFailure() {
        return error != null;
    }

    public Throwable getError() {
        return error;
    }
}

And an example project that uses curryful-rest:
package io.github.curryful.example;

import static io.github.curryful.rest.http.HttpContentType.TEXT_PLAIN;
import static io.github.curryful.rest.http.HttpResponseCode.OK;
import static io.github.curryful.rest.http.HttpResponseCode.UNAUTHORIZED;

import io.github.curryful.rest.RestFunction;
import io.github.curryful.rest.http.HttpResponse;

public class Hello {

	public static final RestFunction sayHello = _context ->
			HttpResponse.of(OK, "Hello, world!", TEXT_PLAIN);

	public static final RestFunction sayHelloName = _context ->
			HttpResponse.of(OK, "Hello, " + _context.getPathParameters().get("name").getValue() + "!" , TEXT_PLAIN);

	public static final RestFunction secureHello = context -> {
		var username = context.getHeaders().get("X-Authenticated-User");

		if (!username.hasValue()) {
			return HttpResponse.of(UNAUTHORIZED);
		}

		return HttpResponse.of(OK, "Hello, " + username.getValue() + "!", TEXT_PLAIN);
	};
}

package io.github.curryful.example;

import static io.github.curryful.rest.http.HttpContentType.TEXT_PLAIN;
import static io.github.curryful.rest.http.HttpResponseCode.OK;

import java.util.Comparator;
import java.util.stream.Collectors;

import io.github.curryful.commons.collections.ImmutableArrayList;
import io.github.curryful.commons.collections.MutableArrayList;
import io.github.curryful.rest.RestFunction;
import io.github.curryful.rest.http.HttpResponse;

public class Numbers {

	private static final ImmutableArrayList<Integer> NUMBERS;

	static {
		MutableArrayList<Integer> numbers = MutableArrayList.empty();
		numbers.add(3);
		numbers.add(1);
		numbers.add(4);
		numbers.add(1);
		numbers.add(5);
		numbers.add(9);
		numbers.add(2);
		NUMBERS = numbers;
	}

	public static final RestFunction getNumbers = context -> {
		var numbers = MutableArrayList.of(NUMBERS);
		var order = context.getQueryParameters().get("order");

		Comparator<Integer> comparator = order.hasValue() && order.getValue().equals("ascending") ?
				Integer::compare : (a, b) -> Integer.compare(b, a);
		numbers = numbers.stream().sorted(comparator)
				.collect(MutableArrayList::empty, MutableArrayList::add, MutableArrayList::addAll);

		var body = numbers.stream().map(i -> i.toString()).collect(Collectors.joining(", "));
		return HttpResponse.of(OK, body, TEXT_PLAIN);
	};
}

package io.github.curryful.example;

import static io.github.curryful.example.Hello.sayHello;
import static io.github.curryful.example.Hello.sayHelloName;
import static io.github.curryful.example.Hello.secureHello;
import static io.github.curryful.example.Numbers.getNumbers;
import static io.github.curryful.rest.Server.listen;

import java.util.Base64;

import io.github.curryful.commons.collections.ImmutableArrayList;
import io.github.curryful.commons.collections.ImmutableMaybeHashMap;
import io.github.curryful.commons.collections.MutableArrayList;
import io.github.curryful.commons.collections.MutableMaybeHashMap;
import io.github.curryful.rest.Destination;
import io.github.curryful.rest.Endpoint;
import io.github.curryful.rest.http.HttpContext;
import io.github.curryful.rest.http.HttpMethod;
import io.github.curryful.rest.middleware.PreMiddleware;

public class Main {

	private static final ImmutableMaybeHashMap<String, String> USERS;

	static {
		MutableMaybeHashMap<String, String> users = MutableMaybeHashMap.empty();
		users.put("admin", "admin");
		users.put("user", "password123");
		USERS = users;
	}

	public static final PreMiddleware basicAuth = context -> {
		var authHeader = context.getHeaders().get("Authorization");

		if (!authHeader.hasValue()) {
			return context;
		}

		var authParts = authHeader.getValue().split(" ");

		if (authParts.length != 2 || !authParts[0].equals("Basic")) {
			return context;
		}

		var credentials = new String(Base64.getDecoder().decode(authParts[1]));
		var credentialParts = credentials.split(":");

		if (credentialParts.length != 2) {
			return context;
		}

		var username = credentialParts[0];
		var password = credentialParts[1];

		var dbPassword = USERS.get(username);
		if (!dbPassword.hasValue() || !dbPassword.getValue().equals(password)) {
			return context;
		}

		var headers = MutableMaybeHashMap.of(context.getHeaders());
		headers.put("X-Authenticated-User", username);
		return HttpContext.of(context.getMethod(), context.getActualUri(), context.getFormalUri(),
				context.getPathParameters(), context.getQueryParameters(), headers,
				context.getAddress(), context.getBody());
	};

	public static void main(String[] args) {
		MutableArrayList<PreMiddleware> preMiddleware = MutableArrayList.empty();
		preMiddleware.add(basicAuth);

		MutableArrayList<Endpoint> endpoints = MutableArrayList.empty();
		endpoints.add(Endpoint.of(Destination.of(HttpMethod.GET, "/hello"), sayHello));
		endpoints.add(Endpoint.of(Destination.of(HttpMethod.GET, "/hello/:name"), sayHelloName));
		endpoints.add(Endpoint.of(Destination.of(HttpMethod.GET, "/secure/hello"), secureHello));
		endpoints.add(Endpoint.of(Destination.of(HttpMethod.GET, "/numbers"), getNumbers));

		listen.apply(preMiddleware).apply(endpoints).apply(ImmutableArrayList.empty()).apply(8080);
	}
}
